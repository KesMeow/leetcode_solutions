class Solution {
    public int minCostConnectPoints(int[][] points) {
        if (points == null || points.length == 0){
            return 0;
        }
        int size = points.length;
        // PriorityQueue to sort based on cost    
        PriorityQueue<Edge> pq = new PriorityQueue<Edge>((x, y) -> x.cost - y.cost);
        // A boolean map to keep track of visited map
        boolean[] visited = new boolean[size];
        
        int result = 0;
        int edgesLeft = size - 1;
        
        // Start from vertex 0, calculate all edge cost from 0 to all other vertices
        // and add all such edges to priority queue
        for (int j = 1; j < size; j++){
                
            int[] coordinate1 = points[0];
            int[] coordinate2 = points[j];
            Edge edge = new Edge(0, j, distance(points, 0, j));
            pq.add(edge);
        }
        
        // add initial vertex to the visited set
        visited[0] = true;
        
        // while priority queue is not empty and we haven't used up all edges
        while(!pq.isEmpty() && edgesLeft > 0){
            Edge e = pq.poll();
            int point1 = e.point1;
            int point2 = e.point2;
            int cost = e.cost; 
            // If point 2 is not in visited, we add the cost
            // Otherwise, a cycle will be formed. 
            if (!visited[point2]){
                result += cost;
                // mark the new vertex to visited. 
                visited[point2] = true;
                // Calculate all edge cost from point 2 to all other vertices 
                // and add them to the priority queue. 
                for (int j = 0; j < size; j++ ){
                    if (!visited[j]){
                        pq.add(new Edge(point2, j, distance(points, point2, j)));
                    }
                }
                // decrement the edge counter.
                edgesLeft --;
            }
        }
        return result;
    }
    
    private int distance(int[][] points, int i, int j){
        int[] coordinate1 = points[i];
        int[] coordinate2 = points[j];
        int cost = Math.abs(coordinate1[0] - coordinate2[0]) + Math.abs(coordinate1[1] - coordinate2[1]);
        return cost;
    }
    
    class Edge{
        int point1;
        int point2;
        int cost;
        
        Edge(int point1, int point2, int cost){
            this.point1 = point1;
            this.point2 = point2;
            this.cost = cost;
        }
    }
}